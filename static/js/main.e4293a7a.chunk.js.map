{"version":3,"sources":["components/MarkdownPreviewer/Editor.js","components/MarkdownPreviewer/Preview.js","components/MarkdownPreviewer/MarkdownPreviewer.js","App.js","reportWebVitals.js","index.js"],"names":["Editor","props","handleChange","bind","event","temp","target","value","this","onChange","document","getElementById","defaultValue","id","className","name","cols","rows","Component","marked","require","Preview","innerHTML","preContent","MarkdownPreviewer","state","contentInEditor","changeEditor","inputString","setState","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"sQA6EeA,E,kDA1EX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,aAAe,EAAKA,aAAaC,KAAlB,gBAFL,E,gDAInB,SAAaC,GACT,IAAMC,EAAOD,EAAME,OAAOC,MAC1BC,KAAKP,MAAMQ,SAASJ,K,+BAExB,WAgDIK,SAASC,eAAe,UAAUC,aA/CjB,wpCAgDjBJ,KAAKP,MAAMQ,SAASC,SAASC,eAAe,UAAUJ,S,oBAE1D,WACI,OACI,sBAAKM,GAAG,aAAR,UACI,sBAAKC,UAAU,YAAf,UACI,mBAAGA,UAAU,0BACb,wCACA,mBAAGA,UAAU,gCAGjB,0BAAUC,KAAK,SAASF,GAAG,SAASG,KAAK,MAAMC,KAAK,KAAKR,SAAUD,KAAKN,sB,GArEnEgB,aCDfC,EAASC,EAAQ,IAyBRC,E,kDAtBX,WAAYpB,GAAQ,uCACVA,G,sDAEV,WACIS,SAASC,eAAe,WAAWW,UAAYH,EAAOX,KAAKP,MAAMsB,c,oBAErE,WACI,OACI,sBAAKV,GAAG,cAAR,UACI,sBAAKC,UAAU,YAAf,UACI,mBAAGA,UAAU,0BACb,yCACA,mBAAGA,UAAU,gCAGjB,qBAAKD,GAAG,mB,GAhBFK,aCuBPM,G,wDApBX,WAAYvB,GAAQ,IAAD,8BACf,cAAMA,IACDwB,MAAQ,CACTC,gBAAiB,IAErB,EAAKC,aAAe,EAAKA,aAAaxB,KAAlB,gBALL,E,gDAOnB,SAAayB,GACTpB,KAAKqB,SAAS,CAACH,gBAAiBE,M,oBAEpC,WACI,OACI,sBAAKf,GAAG,6BAAR,UACI,cAAC,EAAD,CAAQJ,SAAUD,KAAKmB,eACvB,cAAC,EAAD,CAASJ,WAAYf,KAAKiB,MAAMC,yB,GAfhBR,cCKjBY,MARf,WACE,OACE,qBAAKhB,UAAU,MAAf,SACE,cAAC,EAAD,OCOSiB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFhC,SAASC,eAAe,SAM1BoB,M","file":"static/js/main.e4293a7a.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Editor extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n    handleChange(event) {\r\n        const temp = event.target.value;\r\n        this.props.onChange(temp);\r\n    }\r\n    componentDidMount() {\r\n        const placeholder = `# Welcome to my React Markdown Previewer!\r\n\r\n## This is a sub-heading...\r\n### And here's some other cool stuff:\r\n\r\nHeres some code, \\`<div></div>\\`, between 2 backticks.\r\n\r\n\\`\\`\\`\r\n// this is multi-line code:\r\n\r\nfunction anotherExample(firstLine, lastLine) {\r\nif (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\r\n    return multiLineCode;\r\n}\r\n}\r\n\\`\\`\\`\r\n\r\nYou can also make text **bold**... whoa!\r\n\r\nOr _italic_.\r\n\r\nOr... wait for it... **_both!_**\r\n\r\nAnd feel free to go crazy ~~crossing stuff out~~.\r\n\r\nThere's also [links](https://www.freecodecamp.org), and\r\n> Block Quotes!\r\n\r\nAnd if you want to get really crazy, even tables:\r\n\r\nWild Header | Crazy Header | Another Header?\r\n------------ | ------------- | -------------\r\nYour content can | be here, and it | can be here....\r\nAnd here. | Okay. | I think we get it.\r\n\r\n- And of course there are lists.\r\n- Some are bulleted.\r\n    - With different indentation levels.\r\n        - That look like this.\r\n\r\n\r\n1. And there are numbered lists too.\r\n1. Use just 1s if you want!\r\n1. And last but not least, let's not forget embedded images:\r\n\r\n![freeCodeCamp Logo](https://cdn.freecodecamp.org/testable-projects-fcc/images/fcc_secondary.svg)\r\n`;\r\n        document.getElementById(\"editor\").defaultValue = placeholder;\r\n        this.props.onChange(document.getElementById(\"editor\").value);\r\n    }\r\n    render() {\r\n        return (\r\n            <div id=\"editor-box\">\r\n                <div className=\"title-box\">\r\n                    <i className=\"fab fa-free-code-camp\"></i>\r\n                    <h3>Editor</h3>\r\n                    <i className=\"fas fa-expand-arrows-alt\"></i>\r\n                    {/* <i class=\"fas fa-compress-alt\"></i> */}\r\n                </div>\r\n                <textarea name=\"editor\" id=\"editor\" cols=\"100\" rows=\"10\" onChange={this.handleChange}></textarea>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Editor;\r\n","import React, { Component } from 'react';\r\nconst marked = require(\"marked\");\r\n\r\nclass Preview extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    componentDidUpdate() {\r\n        document.getElementById(\"preview\").innerHTML = marked(this.props.preContent);\r\n    }\r\n    render() {\r\n        return (\r\n            <div id=\"preview-box\">\r\n                <div className=\"title-box\">\r\n                    <i className=\"fab fa-free-code-camp\"></i>\r\n                    <h3>Preview</h3>\r\n                    <i className=\"fas fa-expand-arrows-alt\"></i>\r\n                    {/* <i class=\"fas fa-compress-alt\"></i> */}\r\n                </div>\r\n                <div id=\"preview\">\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Preview;\r\n","import React, { Component } from 'react';\r\nimport Editor from './Editor';\r\nimport Preview from './Preview';\r\nimport './MarkdownPreviewer.scss';\r\n\r\nclass MarkdownPreviewer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            contentInEditor: ''\r\n        }\r\n        this.changeEditor = this.changeEditor.bind(this);\r\n    }\r\n    changeEditor(inputString) {\r\n        this.setState({contentInEditor: inputString});\r\n    }\r\n    render() {\r\n        return (\r\n            <div id=\"markdown-preview-container\">\r\n                <Editor onChange={this.changeEditor}></Editor>\r\n                <Preview preContent={this.state.contentInEditor}></Preview>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MarkdownPreviewer;\r\n","import MarkdownPreviewer from './components/MarkdownPreviewer/MarkdownPreviewer'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MarkdownPreviewer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}